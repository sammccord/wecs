{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["type Entity = {}\n\ninterface Component<T> {\n  new(...args: any): T\n  name: string\n}\n\ntype QueryCallback = (entities: Entity[]) => void\n\ntype ComponentUpdater<T> = (component: T) => T\n\ninterface Query {\n  components: Component<unknown>[],\n  entities: Entity[]\n  callbacks: QueryCallback[]\n}\n\ninterface Config {\n  parallel?: boolean\n  onBefore?: (...args: any[]) => Promise<void>\n  onAfter?: (...args: any[]) => Promise<void>\n}\n\nexport function getComponent<T>(entity: Entity, Component: Component<T>): T {\n  return entity[Component.name]\n}\n\nexport function hasComponent<T>(entity: Entity, components: Component<T>) {\n  return !!entity[components.name]\n}\n\nexport function hasComponents(entity: Entity, components: Component<unknown>[]) {\n  return components.every(c => !!entity[c.name])\n}\n\nexport class World {\n\n  protected config: Config = {}\n\n  private _systems: [Function, string][] = []\n  private _entities: Entity[] = []\n  private _queries: { [key: string]: Query } = {}\n\n  constructor(config?: Config) {\n    this.config = config || {}\n  }\n\n  protected makeQueryKey(components: Component<unknown>[]): string {\n    return components.map(c => c.name).sort().join('-')\n  }\n\n  protected queryWithKey(key, components: Component<unknown>[], persist?: Boolean): Entity[] {\n    if (this._queries[key]) return this._queries[key].entities\n    const entities = this._entities.filter(e => hasComponents(e, components))\n    if (persist) this._queries[key] = { components, entities, callbacks: [] }\n    return entities\n  }\n\n  private _handleAddCallbacks(e: Entity) {\n    Object.values(this._queries).forEach(query => {\n      if (!query.entities.includes(e)) {\n        if (hasComponents(e, query.components)) {\n          query.entities.push(e)\n          query.callbacks.forEach(fn => fn(query.entities))\n        }\n      }\n    })\n  }\n\n  private _handleRemoveCallbacks(entity: Entity) {\n    Object.values(this._queries).forEach(query => {\n      if (!query.entities.includes(entity)) return\n      if (!hasComponents(entity, query.components)) {\n        query.entities.splice(query.entities.indexOf(entity), 1)\n        query.callbacks.forEach(fn => fn(query.entities))\n      }\n    })\n    if (!~Object.keys(entity).length) this._entities.splice(this._entities.indexOf(entity), 1)\n  }\n\n  public addComponent<T>(entity: Entity, Component: Component<T>, ...args: any[]) {\n    entity[Component.name] = new Component(...args)\n    this._handleAddCallbacks(entity)\n  }\n\n  public addComponents(entity: Entity, components: [Component<unknown>, ...any[]][]) {\n    if (!~components.length) return\n    components.forEach(([Constructor, ...args]) => {\n      entity[Constructor.name] = new Constructor(...args)\n    })\n    this._handleAddCallbacks(entity)\n  }\n\n  public createEntity(components: [Component<unknown>, ...any[]][]): Entity {\n    const entity: Entity = {}\n\n    components.forEach(([Constructor, ...args]) => {\n      entity[Constructor.name] = new Constructor(...args)\n    })\n\n    this._entities.push(entity)\n\n    Object.values(this._queries).forEach(query => {\n      if (hasComponents(entity, query.components)) {\n        query.entities.push(entity)\n      }\n\n      query.callbacks.forEach(fn => fn(query.entities))\n    })\n\n    return entity\n  }\n\n  public query(components: Component<unknown>[], persist?: Boolean): Entity[] {\n    const key = this.makeQueryKey(components)\n    return this.queryWithKey(key, components, persist)\n  }\n\n  public register(system: Function, components: Component<unknown>[]): void {\n    const key = this.makeQueryKey(components)\n    this._systems.push([system, key])\n    this._queries[key] = { components, entities: [], callbacks: [] }\n  }\n\n  public removeComponent<T>(entity: Entity, component: Component<T>) {\n    if (!component) return\n    delete entity[component.name]\n    this._handleRemoveCallbacks(entity)\n  }\n\n  public removeComponents(entity: Entity, components: Component<unknown>[]) {\n    if (!components || !~components.length) return\n    components.forEach(component => {\n      delete entity[component.name]\n    })\n    this._handleRemoveCallbacks(entity)\n  }\n\n  public async run(...args: any[]): Promise<void> {\n    if (this.config.onBefore) await this.config.onBefore(...args)\n    if (this.config.parallel) {\n      this._systems.forEach(([system, queryKey]) => {\n        if (args) system(...args, this._queries[queryKey].entities)\n        else system(this._queries[queryKey].entities)\n      })\n    } else {\n      for (let [system, queryKey] of this._systems) {\n        if (args) await system(...args, this._queries[queryKey].entities)\n        else await system(this._queries[queryKey].entities)\n      }\n    }\n    if (this.config.onAfter) await this.config.onAfter(...args)\n  }\n\n  public subscribe(components: Component<unknown>[], callback: QueryCallback, emit?: boolean): Function {\n    const key = this.makeQueryKey(components)\n    const entities = this.queryWithKey(key, components)\n    if (!!this._queries[key]) this._queries[key].callbacks.push(callback)\n    else this._queries[key] = {\n      components,\n      entities,\n      callbacks: [callback]\n    }\n    if (emit) callback(entities)\n    return () => {\n      if (!!this._queries[key]) {\n        this._queries[key].callbacks.splice(this._queries[key].callbacks.indexOf(callback), 1)\n      }\n    }\n  }\n\n  public unsubscribe(components: Component<unknown>[], callback: QueryCallback): void {\n    const key = this.makeQueryKey(components)\n    if (!!this._queries[key]) {\n      this._queries[key].callbacks.splice(this._queries[key].callbacks.indexOf(callback), 1)\n    }\n  }\n\n  public updateComponent<T>(entity: Entity, Component, update: any | ComponentUpdater<T>): void {\n    entity[Component.name] = typeof update === 'function' ? update(entity[Component.name]) || entity[Component.name] : update\n    Object.values(this._queries).forEach(query => {\n      if (query.entities.includes(entity)) {\n        query.callbacks.forEach(fn => fn(query.entities))\n      }\n    })\n  }\n}\n"],"names":["getComponent","entity","Component","name","hasComponent","components","hasComponents","every","c","World","constructor","config","this","makeQueryKey","map","sort","join","queryWithKey","key","persist","_queries","entities","_entities","filter","e","callbacks","_handleAddCallbacks","Object","values","forEach","query","includes","push","fn","_handleRemoveCallbacks","splice","indexOf","keys","length","addComponent","args","addComponents","Constructor","createEntity","register","system","_systems","removeComponent","component","removeComponents","[object Object]","onBefore","parallel","queryKey","onAfter","subscribe","callback","emit","unsubscribe","updateComponent","update"],"mappings":"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"}